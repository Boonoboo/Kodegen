package dk.cachet.rad.example.infrastructure

import dk.cachet.rad.example.infrastructure.dice.DiceService
import dk.cachet.rad.example.infrastructure.oracle.AnswerRepository
import dk.cachet.rad.example.infrastructure.oracle.OracleService
import io.ktor.application.Application
import io.ktor.application.call
import io.ktor.application.install
import io.ktor.features.ContentNegotiation
import io.ktor.http.ContentType
import io.ktor.response.respondText
import io.ktor.routing.get
import io.ktor.routing.routing
import io.ktor.serialization.DefaultJsonConfiguration
import io.ktor.serialization.SerializationConverter
import io.ktor.serialization.json
import kotlinx.serialization.json.Json
import org.koin.core.context.startKoin
import org.koin.dsl.module

// Sets the main function to the startup of a Jetty engine (i.e. boots up a HTTP server)
fun main(args: Array<String>): Unit = io.ktor.server.jetty.EngineMain.main(args)

fun Application.mainModule() {
	// TODO
	//   Can / should this be added to autogenerated modules?
	install(ContentNegotiation) {
		register(ContentType.Application.Json, SerializationConverter(Json(DefaultJsonConfiguration)))
	}

	configureKoin()

	routing {
		get("/") {
			call.respondText("In root", contentType = ContentType.Text.Plain)
		}
	}
}

// TODO: Move to autogenerated function that can be run from main
fun configureKoin() {
	val diceModule = module {
		single { DiceService() }
	}

	val oracleModule = module {
		single<dk.cachet.rad.example.domain.oracle.AnswerRepository> { AnswerRepository() }
		single { OracleService(get()) }
	}

	startKoin {
		modules(diceModule, oracleModule)
	}
}